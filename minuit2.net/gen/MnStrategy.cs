//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MnStrategy : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MnStrategy(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MnStrategy obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MnStrategy obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MnStrategy() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Minuit2PINVOKE.delete_MnStrategy(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public MnStrategy() : this(Minuit2PINVOKE.new_MnStrategy__SWIG_0(), true) {
  }

  public MnStrategy(uint arg0) : this(Minuit2PINVOKE.new_MnStrategy__SWIG_1(arg0), true) {
  }

  public uint Strategy() {
    uint ret = Minuit2PINVOKE.MnStrategy_Strategy(swigCPtr);
    return ret;
  }

  public uint GradientNCycles() {
    uint ret = Minuit2PINVOKE.MnStrategy_GradientNCycles(swigCPtr);
    return ret;
  }

  public double GradientStepTolerance() {
    double ret = Minuit2PINVOKE.MnStrategy_GradientStepTolerance(swigCPtr);
    return ret;
  }

  public double GradientTolerance() {
    double ret = Minuit2PINVOKE.MnStrategy_GradientTolerance(swigCPtr);
    return ret;
  }

  public uint HessianNCycles() {
    uint ret = Minuit2PINVOKE.MnStrategy_HessianNCycles(swigCPtr);
    return ret;
  }

  public double HessianStepTolerance() {
    double ret = Minuit2PINVOKE.MnStrategy_HessianStepTolerance(swigCPtr);
    return ret;
  }

  public double HessianG2Tolerance() {
    double ret = Minuit2PINVOKE.MnStrategy_HessianG2Tolerance(swigCPtr);
    return ret;
  }

  public uint HessianGradientNCycles() {
    uint ret = Minuit2PINVOKE.MnStrategy_HessianGradientNCycles(swigCPtr);
    return ret;
  }

  public uint HessianCentralFDMixedDerivatives() {
    uint ret = Minuit2PINVOKE.MnStrategy_HessianCentralFDMixedDerivatives(swigCPtr);
    return ret;
  }

  public uint HessianForcePosDef() {
    uint ret = Minuit2PINVOKE.MnStrategy_HessianForcePosDef(swigCPtr);
    return ret;
  }

  public int StorageLevel() {
    int ret = Minuit2PINVOKE.MnStrategy_StorageLevel(swigCPtr);
    return ret;
  }

  public bool IsLow() {
    bool ret = Minuit2PINVOKE.MnStrategy_IsLow(swigCPtr);
    return ret;
  }

  public bool IsMedium() {
    bool ret = Minuit2PINVOKE.MnStrategy_IsMedium(swigCPtr);
    return ret;
  }

  public bool IsHigh() {
    bool ret = Minuit2PINVOKE.MnStrategy_IsHigh(swigCPtr);
    return ret;
  }

  public bool IsVeryHigh() {
    bool ret = Minuit2PINVOKE.MnStrategy_IsVeryHigh(swigCPtr);
    return ret;
  }

  public void SetLowStrategy() {
    Minuit2PINVOKE.MnStrategy_SetLowStrategy(swigCPtr);
  }

  public void SetMediumStrategy() {
    Minuit2PINVOKE.MnStrategy_SetMediumStrategy(swigCPtr);
  }

  public void SetHighStrategy() {
    Minuit2PINVOKE.MnStrategy_SetHighStrategy(swigCPtr);
  }

  public void SetVeryHighStrategy() {
    Minuit2PINVOKE.MnStrategy_SetVeryHighStrategy(swigCPtr);
  }

  public void SetGradientNCycles(uint n) {
    Minuit2PINVOKE.MnStrategy_SetGradientNCycles(swigCPtr, n);
  }

  public void SetGradientStepTolerance(double stp) {
    Minuit2PINVOKE.MnStrategy_SetGradientStepTolerance(swigCPtr, stp);
  }

  public void SetGradientTolerance(double toler) {
    Minuit2PINVOKE.MnStrategy_SetGradientTolerance(swigCPtr, toler);
  }

  public void SetHessianNCycles(uint n) {
    Minuit2PINVOKE.MnStrategy_SetHessianNCycles(swigCPtr, n);
  }

  public void SetHessianStepTolerance(double stp) {
    Minuit2PINVOKE.MnStrategy_SetHessianStepTolerance(swigCPtr, stp);
  }

  public void SetHessianG2Tolerance(double toler) {
    Minuit2PINVOKE.MnStrategy_SetHessianG2Tolerance(swigCPtr, toler);
  }

  public void SetHessianGradientNCycles(uint n) {
    Minuit2PINVOKE.MnStrategy_SetHessianGradientNCycles(swigCPtr, n);
  }

  public void SetHessianCentralFDMixedDerivatives(uint flag) {
    Minuit2PINVOKE.MnStrategy_SetHessianCentralFDMixedDerivatives(swigCPtr, flag);
  }

  public void SetHessianForcePosDef(uint flag) {
    Minuit2PINVOKE.MnStrategy_SetHessianForcePosDef(swigCPtr, flag);
  }

  public void SetStorageLevel(uint level) {
    Minuit2PINVOKE.MnStrategy_SetStorageLevel(swigCPtr, level);
  }

}
