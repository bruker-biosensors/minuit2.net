//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FCNBaseSwigImpl : FCNBase, global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FCNBaseSwigImpl(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FCNBaseSwigImpl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(FCNBaseSwigImpl obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~FCNBaseSwigImpl() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Minuit2PINVOKE.delete_FCNBaseSwigImpl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  global::System.Runtime.InteropServices.HandleRef FCNBase.GetInterfaceCPtr() {
    return new global::System.Runtime.InteropServices.HandleRef(this, Minuit2PINVOKE.FCNBaseSwigImpl_FCNBase_GetInterfaceCPtr(swigCPtr.Handle));
  }

  public virtual double ErrorDef() {
    double ret = Minuit2PINVOKE.FCNBaseSwigImpl_ErrorDef(swigCPtr);
    return ret;
  }

  public virtual double Up() {
    double ret = Minuit2PINVOKE.FCNBaseSwigImpl_Up(swigCPtr);
    return ret;
  }

  public virtual void SetErrorDef(double arg0) {
    Minuit2PINVOKE.FCNBaseSwigImpl_SetErrorDef(swigCPtr, arg0);
  }

  public virtual bool HasGradient() {
    bool ret = Minuit2PINVOKE.FCNBaseSwigImpl_HasGradient(swigCPtr);
    return ret;
  }

  public virtual VectorDouble Gradient(VectorDouble arg0) {
    VectorDouble ret = new VectorDouble(Minuit2PINVOKE.FCNBaseSwigImpl_Gradient(swigCPtr, VectorDouble.getCPtr(arg0)), true);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual VectorDouble GradientWithPrevResult(VectorDouble parameters, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3) {
    VectorDouble ret = new VectorDouble(Minuit2PINVOKE.FCNBaseSwigImpl_GradientWithPrevResult(swigCPtr, VectorDouble.getCPtr(parameters), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3)), true);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual GradientParameterSpace gradParameterSpace() {
    GradientParameterSpace ret = (GradientParameterSpace)Minuit2PINVOKE.FCNBaseSwigImpl_gradParameterSpace(swigCPtr);
    return ret;
  }

  public virtual VectorDouble G2(VectorDouble arg0) {
    VectorDouble ret = new VectorDouble(Minuit2PINVOKE.FCNBaseSwigImpl_G2(swigCPtr, VectorDouble.getCPtr(arg0)), true);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual VectorDouble Hessian(VectorDouble arg0) {
    VectorDouble ret = new VectorDouble(Minuit2PINVOKE.FCNBaseSwigImpl_Hessian(swigCPtr, VectorDouble.getCPtr(arg0)), true);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasHessian() {
    bool ret = Minuit2PINVOKE.FCNBaseSwigImpl_HasHessian(swigCPtr);
    return ret;
  }

  public virtual bool HasG2() {
    bool ret = Minuit2PINVOKE.FCNBaseSwigImpl_HasG2(swigCPtr);
    return ret;
  }

}
