//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


internal class MnUserCovariance : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MnUserCovariance(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MnUserCovariance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MnUserCovariance obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MnUserCovariance() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Minuit2PINVOKE.delete_MnUserCovariance(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public MnUserCovariance() : this(Minuit2PINVOKE.new_MnUserCovariance__SWIG_0(), true) {
  }

  public MnUserCovariance(SWIGTYPE_p_std__spanT_double_const_t data, uint nrow) : this(Minuit2PINVOKE.new_MnUserCovariance__SWIG_1(SWIGTYPE_p_std__spanT_double_const_t.getCPtr(data), nrow), true) {
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public MnUserCovariance(SWIGTYPE_p_double data, uint nrow) : this(Minuit2PINVOKE.new_MnUserCovariance__SWIG_2(SWIGTYPE_p_double.getCPtr(data), nrow), true) {
  }

  public MnUserCovariance(uint n) : this(Minuit2PINVOKE.new_MnUserCovariance__SWIG_3(n), true) {
  }

  public void Scale(double f) {
    Minuit2PINVOKE.MnUserCovariance_Scale(swigCPtr, f);
  }

  public VectorDouble Data() {
    VectorDouble ret = new VectorDouble(Minuit2PINVOKE.MnUserCovariance_Data(swigCPtr), false);
    return ret;
  }

  public uint Nrow() {
    uint ret = Minuit2PINVOKE.MnUserCovariance_Nrow(swigCPtr);
    return ret;
  }

  public uint size() {
    uint ret = Minuit2PINVOKE.MnUserCovariance_size(swigCPtr);
    return ret;
  }

}
