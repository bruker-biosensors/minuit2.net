//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


internal class MnUserParameterState : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MnUserParameterState(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MnUserParameterState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MnUserParameterState obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MnUserParameterState() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Minuit2PINVOKE.delete_MnUserParameterState(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public MnUserParameterState() : this(Minuit2PINVOKE.new_MnUserParameterState__SWIG_0(), true) {
  }

  public MnUserParameterState(SWIGTYPE_p_std__spanT_double_const_t arg0, SWIGTYPE_p_std__spanT_double_const_t arg1) : this(Minuit2PINVOKE.new_MnUserParameterState__SWIG_1(SWIGTYPE_p_std__spanT_double_const_t.getCPtr(arg0), SWIGTYPE_p_std__spanT_double_const_t.getCPtr(arg1)), true) {
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public MnUserParameterState(SWIGTYPE_p_MnUserParameters arg0) : this(Minuit2PINVOKE.new_MnUserParameterState__SWIG_2(SWIGTYPE_p_MnUserParameters.getCPtr(arg0)), true) {
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public MnUserParameterState(SWIGTYPE_p_std__spanT_double_const_t arg0, SWIGTYPE_p_std__spanT_double_const_t arg1, uint arg2) : this(Minuit2PINVOKE.new_MnUserParameterState__SWIG_3(SWIGTYPE_p_std__spanT_double_const_t.getCPtr(arg0), SWIGTYPE_p_std__spanT_double_const_t.getCPtr(arg1), arg2), true) {
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public MnUserParameterState(SWIGTYPE_p_std__spanT_double_const_t arg0, SWIGTYPE_p_MnUserCovariance arg1) : this(Minuit2PINVOKE.new_MnUserParameterState__SWIG_4(SWIGTYPE_p_std__spanT_double_const_t.getCPtr(arg0), SWIGTYPE_p_MnUserCovariance.getCPtr(arg1)), true) {
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public MnUserParameterState(SWIGTYPE_p_MnUserParameters arg0, SWIGTYPE_p_MnUserCovariance arg1) : this(Minuit2PINVOKE.new_MnUserParameterState__SWIG_5(SWIGTYPE_p_MnUserParameters.getCPtr(arg0), SWIGTYPE_p_MnUserCovariance.getCPtr(arg1)), true) {
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public MnUserParameterState(MinimumState arg0, double arg1, SWIGTYPE_p_MnUserTransformation arg2) : this(Minuit2PINVOKE.new_MnUserParameterState__SWIG_6(MinimumState.getCPtr(arg0), arg1, SWIGTYPE_p_MnUserTransformation.getCPtr(arg2)), true) {
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_MnUserParameters Parameters() {
    SWIGTYPE_p_MnUserParameters ret = new SWIGTYPE_p_MnUserParameters(Minuit2PINVOKE.MnUserParameterState_Parameters(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_MnUserCovariance Covariance() {
    SWIGTYPE_p_MnUserCovariance ret = new SWIGTYPE_p_MnUserCovariance(Minuit2PINVOKE.MnUserParameterState_Covariance(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_MnGlobalCorrelationCoeff GlobalCC() {
    SWIGTYPE_p_MnGlobalCorrelationCoeff ret = new SWIGTYPE_p_MnGlobalCorrelationCoeff(Minuit2PINVOKE.MnUserParameterState_GlobalCC(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_MnUserCovariance Hessian() {
    SWIGTYPE_p_MnUserCovariance ret = new SWIGTYPE_p_MnUserCovariance(Minuit2PINVOKE.MnUserParameterState_Hessian(swigCPtr), true);
    return ret;
  }

  public VectorDouble IntParameters() {
    VectorDouble ret = new VectorDouble(Minuit2PINVOKE.MnUserParameterState_IntParameters(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_MnUserCovariance IntCovariance() {
    SWIGTYPE_p_MnUserCovariance ret = new SWIGTYPE_p_MnUserCovariance(Minuit2PINVOKE.MnUserParameterState_IntCovariance(swigCPtr), false);
    return ret;
  }

  public int CovarianceStatus() {
    int ret = Minuit2PINVOKE.MnUserParameterState_CovarianceStatus(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_MnUserTransformation Trafo() {
    SWIGTYPE_p_MnUserTransformation ret = new SWIGTYPE_p_MnUserTransformation(Minuit2PINVOKE.MnUserParameterState_Trafo(swigCPtr), false);
    return ret;
  }

  public bool IsValid() {
    bool ret = Minuit2PINVOKE.MnUserParameterState_IsValid(swigCPtr);
    return ret;
  }

  public bool HasCovariance() {
    bool ret = Minuit2PINVOKE.MnUserParameterState_HasCovariance(swigCPtr);
    return ret;
  }

  public bool HasGlobalCC() {
    bool ret = Minuit2PINVOKE.MnUserParameterState_HasGlobalCC(swigCPtr);
    return ret;
  }

  public double Fval() {
    double ret = Minuit2PINVOKE.MnUserParameterState_Fval(swigCPtr);
    return ret;
  }

  public double Edm() {
    double ret = Minuit2PINVOKE.MnUserParameterState_Edm(swigCPtr);
    return ret;
  }

  public uint NFcn() {
    uint ret = Minuit2PINVOKE.MnUserParameterState_NFcn(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ROOT__Minuit2__MinuitParameter_t MinuitParameters() {
    SWIGTYPE_p_std__vectorT_ROOT__Minuit2__MinuitParameter_t ret = new SWIGTYPE_p_std__vectorT_ROOT__Minuit2__MinuitParameter_t(Minuit2PINVOKE.MnUserParameterState_MinuitParameters(swigCPtr), false);
    return ret;
  }

  public VectorDouble Params() {
    VectorDouble ret = new VectorDouble(Minuit2PINVOKE.MnUserParameterState_Params(swigCPtr), true);
    return ret;
  }

  public VectorDouble Errors() {
    VectorDouble ret = new VectorDouble(Minuit2PINVOKE.MnUserParameterState_Errors(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_MinuitParameter Parameter(uint i) {
    SWIGTYPE_p_MinuitParameter ret = new SWIGTYPE_p_MinuitParameter(Minuit2PINVOKE.MnUserParameterState_Parameter(swigCPtr, i), false);
    return ret;
  }

  public void Add(string name, double val, double err) {
    Minuit2PINVOKE.MnUserParameterState_Add__SWIG_0(swigCPtr, name, val, err);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add(string name, double val, double err, double arg3, double arg4) {
    Minuit2PINVOKE.MnUserParameterState_Add__SWIG_1(swigCPtr, name, val, err, arg3, arg4);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add(string arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameterState_Add__SWIG_2(swigCPtr, arg0, arg1);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCovariance(SWIGTYPE_p_MnUserCovariance arg0) {
    Minuit2PINVOKE.MnUserParameterState_AddCovariance(swigCPtr, SWIGTYPE_p_MnUserCovariance.getCPtr(arg0));
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void Fix(uint arg0) {
    Minuit2PINVOKE.MnUserParameterState_Fix__SWIG_0(swigCPtr, arg0);
  }

  public void Release(uint arg0) {
    Minuit2PINVOKE.MnUserParameterState_Release__SWIG_0(swigCPtr, arg0);
  }

  public void RemoveLimits(uint arg0) {
    Minuit2PINVOKE.MnUserParameterState_RemoveLimits__SWIG_0(swigCPtr, arg0);
  }

  public void SetValue(uint arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameterState_SetValue__SWIG_0(swigCPtr, arg0, arg1);
  }

  public void SetError(uint arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameterState_SetError__SWIG_0(swigCPtr, arg0, arg1);
  }

  public void SetLimits(uint arg0, double arg1, double arg2) {
    Minuit2PINVOKE.MnUserParameterState_SetLimits__SWIG_0(swigCPtr, arg0, arg1, arg2);
  }

  public void SetUpperLimit(uint arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameterState_SetUpperLimit__SWIG_0(swigCPtr, arg0, arg1);
  }

  public void SetLowerLimit(uint arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameterState_SetLowerLimit__SWIG_0(swigCPtr, arg0, arg1);
  }

  public void SetName(uint iext, string name) {
    Minuit2PINVOKE.MnUserParameterState_SetName(swigCPtr, iext, name);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public double Value(uint arg0) {
    double ret = Minuit2PINVOKE.MnUserParameterState_Value__SWIG_0(swigCPtr, arg0);
    return ret;
  }

  public double Error(uint arg0) {
    double ret = Minuit2PINVOKE.MnUserParameterState_Error__SWIG_0(swigCPtr, arg0);
    return ret;
  }

  public void Fix(string arg0) {
    Minuit2PINVOKE.MnUserParameterState_Fix__SWIG_1(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void Release(string arg0) {
    Minuit2PINVOKE.MnUserParameterState_Release__SWIG_1(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetValue(string arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameterState_SetValue__SWIG_1(swigCPtr, arg0, arg1);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetError(string arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameterState_SetError__SWIG_1(swigCPtr, arg0, arg1);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLimits(string arg0, double arg1, double arg2) {
    Minuit2PINVOKE.MnUserParameterState_SetLimits__SWIG_1(swigCPtr, arg0, arg1, arg2);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUpperLimit(string arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameterState_SetUpperLimit__SWIG_1(swigCPtr, arg0, arg1);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLowerLimit(string arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameterState_SetLowerLimit__SWIG_1(swigCPtr, arg0, arg1);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveLimits(string arg0) {
    Minuit2PINVOKE.MnUserParameterState_RemoveLimits__SWIG_1(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public double Value(string arg0) {
    double ret = Minuit2PINVOKE.MnUserParameterState_Value__SWIG_1(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Error(string arg0) {
    double ret = Minuit2PINVOKE.MnUserParameterState_Error__SWIG_1(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Index(string arg0) {
    uint ret = Minuit2PINVOKE.MnUserParameterState_Index(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetName(uint arg0) {
    string ret = Minuit2PINVOKE.MnUserParameterState_GetName(swigCPtr, arg0);
    return ret;
  }

  public string Name(uint arg0) {
    string ret = Minuit2PINVOKE.MnUserParameterState_Name(swigCPtr, arg0);
    return ret;
  }

  public double Int2ext(uint arg0, double arg1) {
    double ret = Minuit2PINVOKE.MnUserParameterState_Int2ext(swigCPtr, arg0, arg1);
    return ret;
  }

  public double Ext2int(uint arg0, double arg1) {
    double ret = Minuit2PINVOKE.MnUserParameterState_Ext2int(swigCPtr, arg0, arg1);
    return ret;
  }

  public uint IntOfExt(uint arg0) {
    uint ret = Minuit2PINVOKE.MnUserParameterState_IntOfExt(swigCPtr, arg0);
    return ret;
  }

  public uint ExtOfInt(uint arg0) {
    uint ret = Minuit2PINVOKE.MnUserParameterState_ExtOfInt(swigCPtr, arg0);
    return ret;
  }

  public uint VariableParameters() {
    uint ret = Minuit2PINVOKE.MnUserParameterState_VariableParameters(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_MnMachinePrecision Precision() {
    SWIGTYPE_p_MnMachinePrecision ret = new SWIGTYPE_p_MnMachinePrecision(Minuit2PINVOKE.MnUserParameterState_Precision(swigCPtr), false);
    return ret;
  }

  public void SetPrecision(double eps) {
    Minuit2PINVOKE.MnUserParameterState_SetPrecision(swigCPtr, eps);
  }

}
