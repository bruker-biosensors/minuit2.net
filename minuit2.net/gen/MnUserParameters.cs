//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MnUserParameters : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MnUserParameters(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MnUserParameters obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MnUserParameters obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MnUserParameters() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Minuit2PINVOKE.delete_MnUserParameters(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public MnUserParameters() : this(Minuit2PINVOKE.new_MnUserParameters__SWIG_0(), true) {
  }

  public MnUserParameters(VectorDouble arg0, VectorDouble arg1) : this(Minuit2PINVOKE.new_MnUserParameters__SWIG_1(VectorDouble.getCPtr(arg0), VectorDouble.getCPtr(arg1)), true) {
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public MnUserParameters(MnUserParameters par) : this(Minuit2PINVOKE.new_MnUserParameters__SWIG_2(MnUserParameters.getCPtr(par)), true) {
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_MnUserTransformation Trafo() {
    SWIGTYPE_p_MnUserTransformation ret = new SWIGTYPE_p_MnUserTransformation(Minuit2PINVOKE.MnUserParameters_Trafo(swigCPtr), false);
    return ret;
  }

  public uint VariableParameters() {
    uint ret = Minuit2PINVOKE.MnUserParameters_VariableParameters(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ROOT__Minuit2__MinuitParameter_t Parameters() {
    SWIGTYPE_p_std__vectorT_ROOT__Minuit2__MinuitParameter_t ret = new SWIGTYPE_p_std__vectorT_ROOT__Minuit2__MinuitParameter_t(Minuit2PINVOKE.MnUserParameters_Parameters(swigCPtr), false);
    return ret;
  }

  public VectorDouble Params() {
    VectorDouble ret = new VectorDouble(Minuit2PINVOKE.MnUserParameters_Params(swigCPtr), true);
    return ret;
  }

  public VectorDouble Errors() {
    VectorDouble ret = new VectorDouble(Minuit2PINVOKE.MnUserParameters_Errors(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_MinuitParameter Parameter(uint arg0) {
    SWIGTYPE_p_MinuitParameter ret = new SWIGTYPE_p_MinuitParameter(Minuit2PINVOKE.MnUserParameters_Parameter(swigCPtr, arg0), false);
    return ret;
  }

  public bool Add(string arg0, double arg1, double arg2) {
    bool ret = Minuit2PINVOKE.MnUserParameters_Add__SWIG_0(swigCPtr, arg0, arg1, arg2);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Add(string arg0, double arg1, double arg2, double arg3, double arg4) {
    bool ret = Minuit2PINVOKE.MnUserParameters_Add__SWIG_1(swigCPtr, arg0, arg1, arg2, arg3, arg4);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Add(string arg0, double arg1) {
    bool ret = Minuit2PINVOKE.MnUserParameters_Add__SWIG_2(swigCPtr, arg0, arg1);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Fix(uint arg0) {
    Minuit2PINVOKE.MnUserParameters_Fix__SWIG_0(swigCPtr, arg0);
  }

  public void Release(uint arg0) {
    Minuit2PINVOKE.MnUserParameters_Release__SWIG_0(swigCPtr, arg0);
  }

  public void RemoveLimits(uint arg0) {
    Minuit2PINVOKE.MnUserParameters_RemoveLimits__SWIG_0(swigCPtr, arg0);
  }

  public void SetValue(uint arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameters_SetValue__SWIG_0(swigCPtr, arg0, arg1);
  }

  public void SetError(uint arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameters_SetError__SWIG_0(swigCPtr, arg0, arg1);
  }

  public void SetLimits(uint arg0, double arg1, double arg2) {
    Minuit2PINVOKE.MnUserParameters_SetLimits__SWIG_0(swigCPtr, arg0, arg1, arg2);
  }

  public void SetUpperLimit(uint arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameters_SetUpperLimit__SWIG_0(swigCPtr, arg0, arg1);
  }

  public void SetLowerLimit(uint arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameters_SetLowerLimit__SWIG_0(swigCPtr, arg0, arg1);
  }

  public void SetName(uint arg0, string arg1) {
    Minuit2PINVOKE.MnUserParameters_SetName(swigCPtr, arg0, arg1);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public double Value(uint arg0) {
    double ret = Minuit2PINVOKE.MnUserParameters_Value__SWIG_0(swigCPtr, arg0);
    return ret;
  }

  public double Error(uint arg0) {
    double ret = Minuit2PINVOKE.MnUserParameters_Error__SWIG_0(swigCPtr, arg0);
    return ret;
  }

  public void Fix(string arg0) {
    Minuit2PINVOKE.MnUserParameters_Fix__SWIG_1(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void Release(string arg0) {
    Minuit2PINVOKE.MnUserParameters_Release__SWIG_1(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetValue(string arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameters_SetValue__SWIG_1(swigCPtr, arg0, arg1);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetError(string arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameters_SetError__SWIG_1(swigCPtr, arg0, arg1);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLimits(string arg0, double arg1, double arg2) {
    Minuit2PINVOKE.MnUserParameters_SetLimits__SWIG_1(swigCPtr, arg0, arg1, arg2);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUpperLimit(string arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameters_SetUpperLimit__SWIG_1(swigCPtr, arg0, arg1);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLowerLimit(string arg0, double arg1) {
    Minuit2PINVOKE.MnUserParameters_SetLowerLimit__SWIG_1(swigCPtr, arg0, arg1);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveLimits(string arg0) {
    Minuit2PINVOKE.MnUserParameters_RemoveLimits__SWIG_1(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public double Value(string arg0) {
    double ret = Minuit2PINVOKE.MnUserParameters_Value__SWIG_1(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Error(string arg0) {
    double ret = Minuit2PINVOKE.MnUserParameters_Error__SWIG_1(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Index(string arg0) {
    uint ret = Minuit2PINVOKE.MnUserParameters_Index(swigCPtr, arg0);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetName(uint arg0) {
    string ret = Minuit2PINVOKE.MnUserParameters_GetName(swigCPtr, arg0);
    return ret;
  }

  public string Name(uint arg0) {
    string ret = Minuit2PINVOKE.MnUserParameters_Name(swigCPtr, arg0);
    return ret;
  }

  public SWIGTYPE_p_ROOT__Minuit2__MnMachinePrecision Precision() {
    SWIGTYPE_p_ROOT__Minuit2__MnMachinePrecision ret = new SWIGTYPE_p_ROOT__Minuit2__MnMachinePrecision(Minuit2PINVOKE.MnUserParameters_Precision(swigCPtr), false);
    return ret;
  }

  public void SetPrecision(double eps) {
    Minuit2PINVOKE.MnUserParameters_SetPrecision(swigCPtr, eps);
  }

}
