//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


internal class FCNWrap : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FCNWrap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FCNWrap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(FCNWrap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~FCNWrap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Minuit2PINVOKE.delete_FCNWrap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public FCNWrap() : this(Minuit2PINVOKE.new_FCNWrap(), true) {
    SwigDirectorConnect();
  }

  public virtual double Cost(VectorDouble v) {
    double ret = (SwigDerivedClassHasMethod("Cost", swigMethodTypes0) ? Minuit2PINVOKE.FCNWrap_CostSwigExplicitFCNWrap(swigCPtr, VectorDouble.getCPtr(v)) : Minuit2PINVOKE.FCNWrap_Cost(swigCPtr, VectorDouble.getCPtr(v)));
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double Up() {
    double ret = (SwigDerivedClassHasMethod("Up", swigMethodTypes1) ? Minuit2PINVOKE.FCNWrap_UpSwigExplicitFCNWrap(swigCPtr) : Minuit2PINVOKE.FCNWrap_Up(swigCPtr));
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Cost", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateFCNWrap_0(SwigDirectorMethodCost);
    if (SwigDerivedClassHasMethod("Up", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateFCNWrap_1(SwigDirectorMethodUp);
    Minuit2PINVOKE.FCNWrap_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(FCNWrap))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private double SwigDirectorMethodCost(global::System.IntPtr v) {
    return Cost(new VectorDouble(v, false));
  }

  private double SwigDirectorMethodUp() {
    return Up();
  }

  public delegate double SwigDelegateFCNWrap_0(global::System.IntPtr v);
  public delegate double SwigDelegateFCNWrap_1();

  private SwigDelegateFCNWrap_0 swigDelegate0;
  private SwigDelegateFCNWrap_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(VectorDouble) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
}
