//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


internal class MnHesseWrap : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MnHesseWrap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MnHesseWrap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MnHesseWrap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MnHesseWrap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Minuit2PINVOKE.delete_MnHesseWrap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public MnHesseWrap(MnStrategy strategy) : this(Minuit2PINVOKE.new_MnHesseWrap__SWIG_0(MnStrategy.getCPtr(strategy)), true) {
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public MnHesseWrap() : this(Minuit2PINVOKE.new_MnHesseWrap__SWIG_1(), true) {
  }

  public void Update(FunctionMinimum minimum, FCNWrap function, uint maximumFunctionCalls) {
    Minuit2PINVOKE.MnHesseWrap_Update__SWIG_0(swigCPtr, FunctionMinimum.getCPtr(minimum), FCNWrap.getCPtr(function), maximumFunctionCalls);
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(FunctionMinimum minimum, FCNWrap function) {
    Minuit2PINVOKE.MnHesseWrap_Update__SWIG_1(swigCPtr, FunctionMinimum.getCPtr(minimum), FCNWrap.getCPtr(function));
    if (Minuit2PINVOKE.SWIGPendingException.Pending) throw Minuit2PINVOKE.SWIGPendingException.Retrieve();
  }

}
