/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Minuit2(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Minuit2(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Minuit2(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_NullReferenceError:
      exception_code = SWIG_CSharpNullReferenceException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


typedef double DoubleArray;

SWIGINTERN DoubleArray *new_DoubleArray(size_t nelements){
  return new double[nelements]();
}
SWIGINTERN void delete_DoubleArray(DoubleArray *self){
  delete [] self;
}
SWIGINTERN double DoubleArray_getitem(DoubleArray *self,size_t index){
  return self[index];
}
SWIGINTERN void DoubleArray_setitem(DoubleArray *self,size_t index,double value){
  self[index] = value;
}
SWIGINTERN double *DoubleArray_cast(DoubleArray *self){
  return self;
}
SWIGINTERN DoubleArray *DoubleArray_frompointer(double *t){
  return (DoubleArray *) t;
}
SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }

    //#include "Minuit2/GenericFunction.h"
    #include "Minuit2/FCNBase.h"
    #include "Minuit2/MnMatrix.h"
    //#include "Minuit2/FCNGradientBase.h"
    #include "FCNWrap.h"
    #include "Minuit2/MnUserParameters.h"
    //#include "Minuit2/MnMatrix.h"
    #include "Minuit2/MinimumError.h"
    #include "Minuit2/MinimumState.h"
    #include "Minuit2/MinimumParameters.h"
    #include "Minuit2/FunctionMinimum.h"
    #include "Minuit2/MnUserCovariance.h"
    #include "Minuit2/MnStrategy.h"
    #include "Minuit2/MnUserParameterState.h"
    //#include "Minuit2/MnUserTransformation.h"

    #include "MnMigradWrap.h"

    using namespace ROOT::Minuit2;



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "Minuit2CSHARP_wrap.h"

SwigDirector_FCNWrap::SwigDirector_FCNWrap() : ROOT::Minuit2::FCNWrap(), Swig::Director() {
  swig_init_callbacks();
}

double SwigDirector_FCNWrap::Run(std::vector< double > const &v) const {
  double c_result = SwigValueInit< double >() ;
  double jresult = 0 ;
  void * jv = 0 ;
  
  if (!swig_callbackRun) {
    return ROOT::Minuit2::FCNWrap::Run(v);
  } else {
    jv = (std::vector< double > *) &v; 
    jresult = (double) swig_callbackRun(jv);
    c_result = (double)jresult; 
  }
  return c_result;
}

double SwigDirector_FCNWrap::Up() const {
  double c_result = SwigValueInit< double >() ;
  double jresult = 0 ;
  
  if (!swig_callbackUp) {
    return ROOT::Minuit2::FCNWrap::Up();
  } else {
    jresult = (double) swig_callbackUp();
    c_result = (double)jresult; 
  }
  return c_result;
}

void SwigDirector_FCNWrap::swig_connect_director(SWIG_Callback0_t callbackRun, SWIG_Callback1_t callbackUp) {
  swig_callbackRun = callbackRun;
  swig_callbackUp = callbackUp;
}

void SwigDirector_FCNWrap::swig_init_callbacks() {
  swig_callbackRun = 0;
  swig_callbackUp = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleArray(unsigned int jarg1) {
  void * jresult ;
  size_t arg1 ;
  DoubleArray *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (DoubleArray *)new_DoubleArray(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DoubleArray(void * jarg1) {
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  
  arg1 = (DoubleArray *)jarg1; 
  delete_DoubleArray(arg1);
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleArray_getitem(void * jarg1, unsigned int jarg2) {
  double jresult ;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  size_t arg2 ;
  double result;
  
  arg1 = (DoubleArray *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (double)DoubleArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleArray_setitem(void * jarg1, unsigned int jarg2, double jarg3) {
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  arg1 = (DoubleArray *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  DoubleArray_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleArray_cast(void * jarg1) {
  void * jresult ;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  double *result = 0 ;
  
  arg1 = (DoubleArray *)jarg1; 
  result = (double *)DoubleArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleArray_frompointer(void * jarg1) {
  void * jresult ;
  double *arg1 = (double *) 0 ;
  DoubleArray *result = 0 ;
  
  arg1 = (double *)jarg1; 
  result = (DoubleArray *)DoubleArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnStrategy__SWIG_0() {
  void * jresult ;
  ROOT::Minuit2::MnStrategy *result = 0 ;
  
  result = (ROOT::Minuit2::MnStrategy *)new ROOT::Minuit2::MnStrategy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnStrategy__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ROOT::Minuit2::MnStrategy *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (ROOT::Minuit2::MnStrategy *)new ROOT::Minuit2::MnStrategy(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MnStrategy(void * jarg1) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnStrategy_Strategy(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (unsigned int)((ROOT::Minuit2::MnStrategy const *)arg1)->Strategy();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnStrategy_GradientNCycles(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (unsigned int)((ROOT::Minuit2::MnStrategy const *)arg1)->GradientNCycles();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnStrategy_GradientStepTolerance(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (double)((ROOT::Minuit2::MnStrategy const *)arg1)->GradientStepTolerance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnStrategy_GradientTolerance(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (double)((ROOT::Minuit2::MnStrategy const *)arg1)->GradientTolerance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnStrategy_HessianNCycles(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (unsigned int)((ROOT::Minuit2::MnStrategy const *)arg1)->HessianNCycles();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnStrategy_HessianStepTolerance(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (double)((ROOT::Minuit2::MnStrategy const *)arg1)->HessianStepTolerance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnStrategy_HessianG2Tolerance(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (double)((ROOT::Minuit2::MnStrategy const *)arg1)->HessianG2Tolerance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnStrategy_HessianGradientNCycles(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (unsigned int)((ROOT::Minuit2::MnStrategy const *)arg1)->HessianGradientNCycles();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MnStrategy_StorageLevel(void * jarg1) {
  int jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  int result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (int)((ROOT::Minuit2::MnStrategy const *)arg1)->StorageLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnStrategy_IsLow(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (bool)((ROOT::Minuit2::MnStrategy const *)arg1)->IsLow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnStrategy_IsMedium(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (bool)((ROOT::Minuit2::MnStrategy const *)arg1)->IsMedium();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnStrategy_IsHigh(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  result = (bool)((ROOT::Minuit2::MnStrategy const *)arg1)->IsHigh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnStrategy_SetLowStrategy(void * jarg1) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  (arg1)->SetLowStrategy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnStrategy_SetMediumStrategy(void * jarg1) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  (arg1)->SetMediumStrategy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnStrategy_SetHighStrategy(void * jarg1) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  (arg1)->SetHighStrategy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnStrategy_SetGradientNCycles(void * jarg1, unsigned int jarg2) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetGradientNCycles(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnStrategy_SetGradientStepTolerance(void * jarg1, double jarg2) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  double arg2 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetGradientStepTolerance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnStrategy_SetGradientTolerance(void * jarg1, double jarg2) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  double arg2 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetGradientTolerance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnStrategy_SetHessianNCycles(void * jarg1, unsigned int jarg2) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetHessianNCycles(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnStrategy_SetHessianStepTolerance(void * jarg1, double jarg2) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  double arg2 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetHessianStepTolerance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnStrategy_SetHessianG2Tolerance(void * jarg1, double jarg2) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  double arg2 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetHessianG2Tolerance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnStrategy_SetHessianGradientNCycles(void * jarg1, unsigned int jarg2) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetHessianGradientNCycles(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnStrategy_SetStorageLevel(void * jarg1, unsigned int jarg2) {
  ROOT::Minuit2::MnStrategy *arg1 = (ROOT::Minuit2::MnStrategy *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ROOT::Minuit2::MnStrategy *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetStorageLevel(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserParameterState__SWIG_0() {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *result = 0 ;
  
  result = (ROOT::Minuit2::MnUserParameterState *)new ROOT::Minuit2::MnUserParameterState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserParameterState__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  ROOT::Minuit2::MnUserParameterState *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::MnUserParameterState *)new ROOT::Minuit2::MnUserParameterState((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserParameterState__SWIG_2(void * jarg1) {
  void * jresult ;
  MnUserParameters *arg1 = 0 ;
  ROOT::Minuit2::MnUserParameterState *result = 0 ;
  
  arg1 = (MnUserParameters *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MnUserParameters const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::MnUserParameterState *)new ROOT::Minuit2::MnUserParameterState((MnUserParameters const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserParameterState__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  unsigned int arg3 ;
  ROOT::Minuit2::MnUserParameterState *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (ROOT::Minuit2::MnUserParameterState *)new ROOT::Minuit2::MnUserParameterState((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserParameterState__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  MnUserCovariance *arg2 = 0 ;
  ROOT::Minuit2::MnUserParameterState *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg2 = (MnUserCovariance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MnUserCovariance const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::MnUserParameterState *)new ROOT::Minuit2::MnUserParameterState((std::vector< double > const &)*arg1,(MnUserCovariance const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserParameterState__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  MnUserParameters *arg1 = 0 ;
  MnUserCovariance *arg2 = 0 ;
  ROOT::Minuit2::MnUserParameterState *result = 0 ;
  
  arg1 = (MnUserParameters *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MnUserParameters const & is null", 0);
    return 0;
  } 
  arg2 = (MnUserCovariance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MnUserCovariance const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::MnUserParameterState *)new ROOT::Minuit2::MnUserParameterState((MnUserParameters const &)*arg1,(MnUserCovariance const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserParameterState__SWIG_6(void * jarg1, double jarg2, void * jarg3) {
  void * jresult ;
  ROOT::Minuit2::MinimumState *arg1 = 0 ;
  double arg2 ;
  MnUserTransformation *arg3 = 0 ;
  ROOT::Minuit2::MnUserParameterState *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MinimumState const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (MnUserTransformation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MnUserTransformation const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::MnUserParameterState *)new ROOT::Minuit2::MnUserParameterState((ROOT::Minuit2::MinimumState const &)*arg1,arg2,(MnUserTransformation const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MnUserParameterState(void * jarg1) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserParameterState__SWIG_7(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = 0 ;
  ROOT::Minuit2::MnUserParameterState *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MnUserParameterState const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::MnUserParameterState *)new ROOT::Minuit2::MnUserParameterState((ROOT::Minuit2::MnUserParameterState const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_Parameters(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  MnUserParameters *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (MnUserParameters *) &((ROOT::Minuit2::MnUserParameterState const *)arg1)->Parameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_Covariance(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  MnUserCovariance *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (MnUserCovariance *) &((ROOT::Minuit2::MnUserParameterState const *)arg1)->Covariance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_GlobalCC(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  MnGlobalCorrelationCoeff *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (MnGlobalCorrelationCoeff *) &((ROOT::Minuit2::MnUserParameterState const *)arg1)->GlobalCC();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_Hessian(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  MnUserCovariance result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = ((ROOT::Minuit2::MnUserParameterState const *)arg1)->Hessian();
  jresult = new MnUserCovariance(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_IntParameters(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (std::vector< double > *) &((ROOT::Minuit2::MnUserParameterState const *)arg1)->IntParameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_IntCovariance(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  MnUserCovariance *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (MnUserCovariance *) &((ROOT::Minuit2::MnUserParameterState const *)arg1)->IntCovariance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MnUserParameterState_CovarianceStatus(void * jarg1) {
  int jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  int result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (int)((ROOT::Minuit2::MnUserParameterState const *)arg1)->CovarianceStatus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_Trafo(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  MnUserTransformation *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (MnUserTransformation *) &((ROOT::Minuit2::MnUserParameterState const *)arg1)->Trafo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameterState_IsValid(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (bool)((ROOT::Minuit2::MnUserParameterState const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameterState_HasCovariance(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (bool)((ROOT::Minuit2::MnUserParameterState const *)arg1)->HasCovariance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameterState_HasGlobalCC(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (bool)((ROOT::Minuit2::MnUserParameterState const *)arg1)->HasGlobalCC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameterState_Fval(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (double)((ROOT::Minuit2::MnUserParameterState const *)arg1)->Fval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameterState_Edm(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (double)((ROOT::Minuit2::MnUserParameterState const *)arg1)->Edm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameterState_NFcn(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (unsigned int)((ROOT::Minuit2::MnUserParameterState const *)arg1)->NFcn();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_MinuitParameters(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::vector< ROOT::Minuit2::MinuitParameter > *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (std::vector< ROOT::Minuit2::MinuitParameter > *) &((ROOT::Minuit2::MnUserParameterState const *)arg1)->MinuitParameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_Params(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::vector< double > result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = ((ROOT::Minuit2::MnUserParameterState const *)arg1)->Params();
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_Errors(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::vector< double > result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = ((ROOT::Minuit2::MnUserParameterState const *)arg1)->Errors();
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_Parameter(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  MinuitParameter *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (MinuitParameter *) &((ROOT::Minuit2::MnUserParameterState const *)arg1)->Parameter(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_Add__SWIG_0(void * jarg1, const char * jarg2, double jarg3, double jarg4) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->Add((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_Add__SWIG_1(void * jarg1, const char * jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->Add((std::string const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_Add__SWIG_2(void * jarg1, const char * jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  (arg1)->Add((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_Fix__SWIG_0(void * jarg1, unsigned int jarg2) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->Fix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_Release__SWIG_0(void * jarg1, unsigned int jarg2) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->Release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_RemoveLimits__SWIG_0(void * jarg1, unsigned int jarg2) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->RemoveLimits(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetValue__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetValue(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetError__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetError(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetLimits__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3, double jarg4) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetLimits(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetUpperLimit__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetUpperLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetLowerLimit__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetLowerLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetName(void * jarg1, unsigned int jarg2, const char * jarg3) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->SetName(arg2,(std::string const &)*arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameterState_Value__SWIG_0(void * jarg1, unsigned int jarg2) {
  double jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)((ROOT::Minuit2::MnUserParameterState const *)arg1)->Value(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameterState_Error__SWIG_0(void * jarg1, unsigned int jarg2) {
  double jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)((ROOT::Minuit2::MnUserParameterState const *)arg1)->Error(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_Fix__SWIG_1(void * jarg1, const char * jarg2) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->Fix((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_Release__SWIG_1(void * jarg1, const char * jarg2) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->Release((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetValue__SWIG_1(void * jarg1, const char * jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  (arg1)->SetValue((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetError__SWIG_1(void * jarg1, const char * jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  (arg1)->SetError((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetLimits__SWIG_1(void * jarg1, const char * jarg2, double jarg3, double jarg4) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetLimits((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetUpperLimit__SWIG_1(void * jarg1, const char * jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  (arg1)->SetUpperLimit((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetLowerLimit__SWIG_1(void * jarg1, const char * jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  (arg1)->SetLowerLimit((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_RemoveLimits__SWIG_1(void * jarg1, const char * jarg2) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->RemoveLimits((std::string const &)*arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameterState_Value__SWIG_1(void * jarg1, const char * jarg2) {
  double jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (double)((ROOT::Minuit2::MnUserParameterState const *)arg1)->Value((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameterState_Error__SWIG_1(void * jarg1, const char * jarg2) {
  double jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (double)((ROOT::Minuit2::MnUserParameterState const *)arg1)->Error((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameterState_Index(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (unsigned int)((ROOT::Minuit2::MnUserParameterState const *)arg1)->Index((std::string const &)*arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MnUserParameterState_GetName(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (std::string *) &((ROOT::Minuit2::MnUserParameterState const *)arg1)->GetName(arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MnUserParameterState_Name(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (char *)((ROOT::Minuit2::MnUserParameterState const *)arg1)->Name(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameterState_Int2ext(void * jarg1, unsigned int jarg2, double jarg3) {
  double jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((ROOT::Minuit2::MnUserParameterState const *)arg1)->Int2ext(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameterState_Ext2int(void * jarg1, unsigned int jarg2, double jarg3) {
  double jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((ROOT::Minuit2::MnUserParameterState const *)arg1)->Ext2int(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameterState_IntOfExt(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)((ROOT::Minuit2::MnUserParameterState const *)arg1)->IntOfExt(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameterState_ExtOfInt(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)((ROOT::Minuit2::MnUserParameterState const *)arg1)->ExtOfInt(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameterState_VariableParameters(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (unsigned int)((ROOT::Minuit2::MnUserParameterState const *)arg1)->VariableParameters();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameterState_Precision(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  MnMachinePrecision *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  result = (MnMachinePrecision *) &((ROOT::Minuit2::MnUserParameterState const *)arg1)->Precision();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameterState_SetPrecision(void * jarg1, double jarg2) {
  ROOT::Minuit2::MnUserParameterState *arg1 = (ROOT::Minuit2::MnUserParameterState *) 0 ;
  double arg2 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameterState *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetPrecision(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorDouble__SWIG_0() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorDouble__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_Clear(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_Add(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorDouble_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorDouble_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorDouble_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorDouble__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VectorDouble_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VectorDouble_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_AddRange(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorDouble_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_RemoveAt(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorDouble_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_Reverse__SWIG_0(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorDouble_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorDouble_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorDouble_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorDouble_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorDouble_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorDouble(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mndaxpy(unsigned int jarg1, double jarg2, void * jarg3, int jarg4, void * jarg5, int jarg6) {
  int jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  int result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (int)jarg6; 
  result = (int)ROOT::Minuit2::Mndaxpy(arg1,arg2,(double const *)arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mndscal(unsigned int jarg1, double jarg2, void * jarg3, int jarg4) {
  int jresult ;
  unsigned int arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)ROOT::Minuit2::Mndscal(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mndspmv(char * jarg1, unsigned int jarg2, double jarg3, void * jarg4, void * jarg5, int jarg6, double jarg7, void * jarg8, int jarg9) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double arg7 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double *)jarg8; 
  arg9 = (int)jarg9; 
  result = (int)ROOT::Minuit2::Mndspmv((char const *)arg1,arg2,arg3,(double const *)arg4,(double const *)arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LAVector__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ROOT::Minuit2::LAVector *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (ROOT::Minuit2::LAVector *)new ROOT::Minuit2::LAVector(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LAVector(void * jarg1) {
  ROOT::Minuit2::LAVector *arg1 = (ROOT::Minuit2::LAVector *) 0 ;
  
  arg1 = (ROOT::Minuit2::LAVector *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LAVector__SWIG_1(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::LAVector *arg1 = 0 ;
  ROOT::Minuit2::LAVector *result = 0 ;
  
  arg1 = (ROOT::Minuit2::LAVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::LAVector const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::LAVector *)new ROOT::Minuit2::LAVector((ROOT::Minuit2::LAVector const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LAVector_Data__SWIG_0(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::LAVector *arg1 = (ROOT::Minuit2::LAVector *) 0 ;
  double *result = 0 ;
  
  arg1 = (ROOT::Minuit2::LAVector *)jarg1; 
  result = (double *)((ROOT::Minuit2::LAVector const *)arg1)->Data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LAVector_size(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::LAVector *arg1 = (ROOT::Minuit2::LAVector *) 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::LAVector *)jarg1; 
  result = (unsigned int)((ROOT::Minuit2::LAVector const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MinimumParameters__SWIG_0(unsigned int jarg1, double jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  double arg2 ;
  ROOT::Minuit2::MinimumParameters *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  result = (ROOT::Minuit2::MinimumParameters *)new ROOT::Minuit2::MinimumParameters(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MinimumParameters__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ROOT::Minuit2::MinimumParameters *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (ROOT::Minuit2::MinimumParameters *)new ROOT::Minuit2::MinimumParameters(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MinimumParameters__SWIG_2(void * jarg1, double jarg2) {
  void * jresult ;
  ROOT::Minuit2::MnAlgebraicVector *arg1 = 0 ;
  double arg2 ;
  ROOT::Minuit2::MinimumParameters *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnAlgebraicVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MnAlgebraicVector const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  result = (ROOT::Minuit2::MinimumParameters *)new ROOT::Minuit2::MinimumParameters((ROOT::Minuit2::MnAlgebraicVector const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MinimumParameters__SWIG_3(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  ROOT::Minuit2::MnAlgebraicVector *arg1 = 0 ;
  ROOT::Minuit2::MnAlgebraicVector *arg2 = 0 ;
  double arg3 ;
  ROOT::Minuit2::MinimumParameters *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnAlgebraicVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MnAlgebraicVector const & is null", 0);
    return 0;
  } 
  arg2 = (ROOT::Minuit2::MnAlgebraicVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MnAlgebraicVector const & is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (ROOT::Minuit2::MinimumParameters *)new ROOT::Minuit2::MinimumParameters((ROOT::Minuit2::MnAlgebraicVector const &)*arg1,(ROOT::Minuit2::MnAlgebraicVector const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MinimumParameters_Vec(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MinimumParameters *arg1 = (ROOT::Minuit2::MinimumParameters *) 0 ;
  ROOT::Minuit2::MnAlgebraicVector *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MinimumParameters *)jarg1; 
  result = (ROOT::Minuit2::MnAlgebraicVector *) &((ROOT::Minuit2::MinimumParameters const *)arg1)->Vec();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MinimumParameters_Dirin(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MinimumParameters *arg1 = (ROOT::Minuit2::MinimumParameters *) 0 ;
  ROOT::Minuit2::MnAlgebraicVector *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MinimumParameters *)jarg1; 
  result = (ROOT::Minuit2::MnAlgebraicVector *) &((ROOT::Minuit2::MinimumParameters const *)arg1)->Dirin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MinimumParameters_Fval(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::MinimumParameters *arg1 = (ROOT::Minuit2::MinimumParameters *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MinimumParameters *)jarg1; 
  result = (double)((ROOT::Minuit2::MinimumParameters const *)arg1)->Fval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MinimumParameters_IsValid(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MinimumParameters *arg1 = (ROOT::Minuit2::MinimumParameters *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MinimumParameters *)jarg1; 
  result = (bool)((ROOT::Minuit2::MinimumParameters const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MinimumParameters_HasStepSize(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MinimumParameters *arg1 = (ROOT::Minuit2::MinimumParameters *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MinimumParameters *)jarg1; 
  result = (bool)((ROOT::Minuit2::MinimumParameters const *)arg1)->HasStepSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MinimumParameters(void * jarg1) {
  ROOT::Minuit2::MinimumParameters *arg1 = (ROOT::Minuit2::MinimumParameters *) 0 ;
  
  arg1 = (ROOT::Minuit2::MinimumParameters *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FCNWrap() {
  void * jresult ;
  ROOT::Minuit2::FCNWrap *result = 0 ;
  
  result = (ROOT::Minuit2::FCNWrap *)new SwigDirector_FCNWrap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FCNWrap_Run(void * jarg1, void * jarg2) {
  double jresult ;
  ROOT::Minuit2::FCNWrap *arg1 = (ROOT::Minuit2::FCNWrap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::FCNWrap *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  result = (double)((ROOT::Minuit2::FCNWrap const *)arg1)->Run((std::vector< double > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FCNWrap_RunSwigExplicitFCNWrap(void * jarg1, void * jarg2) {
  double jresult ;
  ROOT::Minuit2::FCNWrap *arg1 = (ROOT::Minuit2::FCNWrap *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::FCNWrap *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  result = (double)((ROOT::Minuit2::FCNWrap const *)arg1)->ROOT::Minuit2::FCNWrap::Run((std::vector< double > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FCNWrap_Up(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::FCNWrap *arg1 = (ROOT::Minuit2::FCNWrap *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::FCNWrap *)jarg1; 
  result = (double)((ROOT::Minuit2::FCNWrap const *)arg1)->Up();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FCNWrap_UpSwigExplicitFCNWrap(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::FCNWrap *arg1 = (ROOT::Minuit2::FCNWrap *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::FCNWrap *)jarg1; 
  result = (double)((ROOT::Minuit2::FCNWrap const *)arg1)->ROOT::Minuit2::FCNWrap::Up();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FCNWrap(void * jarg1) {
  ROOT::Minuit2::FCNWrap *arg1 = (ROOT::Minuit2::FCNWrap *) 0 ;
  
  arg1 = (ROOT::Minuit2::FCNWrap *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FCNWrap_director_connect(void *objarg, SwigDirector_FCNWrap::SWIG_Callback0_t callback0, SwigDirector_FCNWrap::SWIG_Callback1_t callback1) {
  ROOT::Minuit2::FCNWrap *obj = (ROOT::Minuit2::FCNWrap *)objarg;
  SwigDirector_FCNWrap *director = static_cast<SwigDirector_FCNWrap *>(obj);
  director->swig_connect_director(callback0, callback1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserParameters__SWIG_0() {
  void * jresult ;
  ROOT::Minuit2::MnUserParameters *result = 0 ;
  
  result = (ROOT::Minuit2::MnUserParameters *)new ROOT::Minuit2::MnUserParameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserParameters__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  ROOT::Minuit2::MnUserParameters *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::MnUserParameters *)new ROOT::Minuit2::MnUserParameters((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MnUserParameters(void * jarg1) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserParameters__SWIG_2(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = 0 ;
  ROOT::Minuit2::MnUserParameters *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MnUserParameters const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::MnUserParameters *)new ROOT::Minuit2::MnUserParameters((ROOT::Minuit2::MnUserParameters const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameters_Trafo(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  MnUserTransformation *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  result = (MnUserTransformation *) &((ROOT::Minuit2::MnUserParameters const *)arg1)->Trafo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameters_VariableParameters(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  result = (unsigned int)((ROOT::Minuit2::MnUserParameters const *)arg1)->VariableParameters();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameters_Parameters(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::vector< ROOT::Minuit2::MinuitParameter > *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  result = (std::vector< ROOT::Minuit2::MinuitParameter > *) &((ROOT::Minuit2::MnUserParameters const *)arg1)->Parameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameters_Params(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::vector< double > result;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  result = ((ROOT::Minuit2::MnUserParameters const *)arg1)->Params();
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameters_Errors(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::vector< double > result;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  result = ((ROOT::Minuit2::MnUserParameters const *)arg1)->Errors();
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameters_Parameter(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  MinuitParameter *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (MinuitParameter *) &((ROOT::Minuit2::MnUserParameters const *)arg1)->Parameter(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameters_Add__SWIG_0(void * jarg1, const char * jarg2, double jarg3, double jarg4) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->Add((std::string const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameters_Add__SWIG_1(void * jarg1, const char * jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (bool)(arg1)->Add((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameters_Add__SWIG_2(void * jarg1, const char * jarg2, double jarg3) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->Add((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_Fix__SWIG_0(void * jarg1, unsigned int jarg2) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->Fix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_Release__SWIG_0(void * jarg1, unsigned int jarg2) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->Release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_RemoveLimits__SWIG_0(void * jarg1, unsigned int jarg2) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->RemoveLimits(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetValue__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetValue(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetError__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetError(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetLimits__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3, double jarg4) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetLimits(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetUpperLimit__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetUpperLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetLowerLimit__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetLowerLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetName(void * jarg1, unsigned int jarg2, const char * jarg3) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->SetName(arg2,(std::string const &)*arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameters_Value__SWIG_0(void * jarg1, unsigned int jarg2) {
  double jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)((ROOT::Minuit2::MnUserParameters const *)arg1)->Value(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameters_Error__SWIG_0(void * jarg1, unsigned int jarg2) {
  double jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)((ROOT::Minuit2::MnUserParameters const *)arg1)->Error(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_Fix__SWIG_1(void * jarg1, const char * jarg2) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->Fix((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_Release__SWIG_1(void * jarg1, const char * jarg2) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->Release((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetValue__SWIG_1(void * jarg1, const char * jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  (arg1)->SetValue((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetError__SWIG_1(void * jarg1, const char * jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  (arg1)->SetError((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetLimits__SWIG_1(void * jarg1, const char * jarg2, double jarg3, double jarg4) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetLimits((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetUpperLimit__SWIG_1(void * jarg1, const char * jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  (arg1)->SetUpperLimit((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetLowerLimit__SWIG_1(void * jarg1, const char * jarg2, double jarg3) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  (arg1)->SetLowerLimit((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_RemoveLimits__SWIG_1(void * jarg1, const char * jarg2) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->RemoveLimits((std::string const &)*arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameters_Value__SWIG_1(void * jarg1, const char * jarg2) {
  double jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (double)((ROOT::Minuit2::MnUserParameters const *)arg1)->Value((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MnUserParameters_Error__SWIG_1(void * jarg1, const char * jarg2) {
  double jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (double)((ROOT::Minuit2::MnUserParameters const *)arg1)->Error((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserParameters_Index(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (unsigned int)((ROOT::Minuit2::MnUserParameters const *)arg1)->Index((std::string const &)*arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MnUserParameters_GetName(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (std::string *) &((ROOT::Minuit2::MnUserParameters const *)arg1)->GetName(arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MnUserParameters_Name(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (char *)((ROOT::Minuit2::MnUserParameters const *)arg1)->Name(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserParameters_Precision(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  ROOT::Minuit2::MnMachinePrecision *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  result = (ROOT::Minuit2::MnMachinePrecision *) &((ROOT::Minuit2::MnUserParameters const *)arg1)->Precision();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserParameters_SetPrecision(void * jarg1, double jarg2) {
  ROOT::Minuit2::MnUserParameters *arg1 = (ROOT::Minuit2::MnUserParameters *) 0 ;
  double arg2 ;
  
  arg1 = (ROOT::Minuit2::MnUserParameters *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetPrecision(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserCovariance__SWIG_0() {
  void * jresult ;
  ROOT::Minuit2::MnUserCovariance *result = 0 ;
  
  result = (ROOT::Minuit2::MnUserCovariance *)new ROOT::Minuit2::MnUserCovariance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserCovariance__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  unsigned int arg2 ;
  ROOT::Minuit2::MnUserCovariance *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (ROOT::Minuit2::MnUserCovariance *)new ROOT::Minuit2::MnUserCovariance((std::vector< double > const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserCovariance__SWIG_2(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  ROOT::Minuit2::MnUserCovariance *result = 0 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ROOT::Minuit2::MnUserCovariance *)new ROOT::Minuit2::MnUserCovariance((double const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserCovariance__SWIG_3(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ROOT::Minuit2::MnUserCovariance *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (ROOT::Minuit2::MnUserCovariance *)new ROOT::Minuit2::MnUserCovariance(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MnUserCovariance(void * jarg1) {
  ROOT::Minuit2::MnUserCovariance *arg1 = (ROOT::Minuit2::MnUserCovariance *) 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserCovariance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnUserCovariance__SWIG_4(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserCovariance *arg1 = 0 ;
  ROOT::Minuit2::MnUserCovariance *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserCovariance *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MnUserCovariance const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::MnUserCovariance *)new ROOT::Minuit2::MnUserCovariance((ROOT::Minuit2::MnUserCovariance const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MnUserCovariance_Scale(void * jarg1, double jarg2) {
  ROOT::Minuit2::MnUserCovariance *arg1 = (ROOT::Minuit2::MnUserCovariance *) 0 ;
  double arg2 ;
  
  arg1 = (ROOT::Minuit2::MnUserCovariance *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->Scale(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnUserCovariance_Data(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnUserCovariance *arg1 = (ROOT::Minuit2::MnUserCovariance *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MnUserCovariance *)jarg1; 
  result = (std::vector< double > *) &((ROOT::Minuit2::MnUserCovariance const *)arg1)->Data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserCovariance_Nrow(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserCovariance *arg1 = (ROOT::Minuit2::MnUserCovariance *) 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnUserCovariance *)jarg1; 
  result = (unsigned int)((ROOT::Minuit2::MnUserCovariance const *)arg1)->Nrow();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MnUserCovariance_size(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MnUserCovariance *arg1 = (ROOT::Minuit2::MnUserCovariance *) 0 ;
  unsigned int result;
  
  arg1 = (ROOT::Minuit2::MnUserCovariance *)jarg1; 
  result = (unsigned int)((ROOT::Minuit2::MnUserCovariance const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FCNBaseSwigImpl(void * jarg1) {
  ROOT::Minuit2::FCNBase *arg1 = (ROOT::Minuit2::FCNBase *) 0 ;
  
  arg1 = (ROOT::Minuit2::FCNBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FCNBaseSwigImpl_ErrorDef(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::FCNBase *arg1 = (ROOT::Minuit2::FCNBase *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::FCNBase *)jarg1; 
  result = (double)((ROOT::Minuit2::FCNBase const *)arg1)->ErrorDef();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FCNBaseSwigImpl_Up(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::FCNBase *arg1 = (ROOT::Minuit2::FCNBase *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::FCNBase *)jarg1; 
  result = (double)((ROOT::Minuit2::FCNBase const *)arg1)->Up();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FCNBaseSwigImpl_SetErrorDef(void * jarg1, double jarg2) {
  ROOT::Minuit2::FCNBase *arg1 = (ROOT::Minuit2::FCNBase *) 0 ;
  double arg2 ;
  
  arg1 = (ROOT::Minuit2::FCNBase *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetErrorDef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FunctionMinimum__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  MinimumSeed *arg1 = 0 ;
  double arg2 ;
  ROOT::Minuit2::FunctionMinimum *result = 0 ;
  
  arg1 = (MinimumSeed *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MinimumSeed const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  result = (ROOT::Minuit2::FunctionMinimum *)new ROOT::Minuit2::FunctionMinimum((MinimumSeed const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FunctionMinimum__SWIG_1(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  MinimumSeed *arg1 = 0 ;
  std::vector< ROOT::Minuit2::MinimumState > *arg2 = 0 ;
  double arg3 ;
  ROOT::Minuit2::FunctionMinimum *result = 0 ;
  
  arg1 = (MinimumSeed *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MinimumSeed const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< ROOT::Minuit2::MinimumState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ROOT::Minuit2::MinimumState > const & is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (ROOT::Minuit2::FunctionMinimum *)new ROOT::Minuit2::FunctionMinimum((MinimumSeed const &)*arg1,(std::vector< ROOT::Minuit2::MinimumState > const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FunctionMinimum__SWIG_2(void * jarg1, void * jarg2, double jarg3, void * jarg4) {
  void * jresult ;
  MinimumSeed *arg1 = 0 ;
  std::vector< ROOT::Minuit2::MinimumState > *arg2 = 0 ;
  double arg3 ;
  ROOT::Minuit2::FunctionMinimum::MnReachedCallLimit arg4 ;
  ROOT::Minuit2::FunctionMinimum::MnReachedCallLimit *argp4 ;
  ROOT::Minuit2::FunctionMinimum *result = 0 ;
  
  arg1 = (MinimumSeed *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MinimumSeed const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< ROOT::Minuit2::MinimumState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ROOT::Minuit2::MinimumState > const & is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  argp4 = (ROOT::Minuit2::FunctionMinimum::MnReachedCallLimit *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ROOT::Minuit2::FunctionMinimum::MnReachedCallLimit", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (ROOT::Minuit2::FunctionMinimum *)new ROOT::Minuit2::FunctionMinimum((MinimumSeed const &)*arg1,(std::vector< ROOT::Minuit2::MinimumState > const &)*arg2,arg3,SWIG_STD_MOVE(arg4));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FunctionMinimum__SWIG_3(void * jarg1, void * jarg2, double jarg3, void * jarg4) {
  void * jresult ;
  MinimumSeed *arg1 = 0 ;
  std::vector< ROOT::Minuit2::MinimumState > *arg2 = 0 ;
  double arg3 ;
  ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm arg4 ;
  ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm *argp4 ;
  ROOT::Minuit2::FunctionMinimum *result = 0 ;
  
  arg1 = (MinimumSeed *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MinimumSeed const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< ROOT::Minuit2::MinimumState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ROOT::Minuit2::MinimumState > const & is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  argp4 = (ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (ROOT::Minuit2::FunctionMinimum *)new ROOT::Minuit2::FunctionMinimum((MinimumSeed const &)*arg1,(std::vector< ROOT::Minuit2::MinimumState > const &)*arg2,arg3,SWIG_STD_MOVE(arg4));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FunctionMinimum_Add__SWIG_0(void * jarg1, void * jarg2) {
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  ROOT::Minuit2::MinimumState *arg2 = 0 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  arg2 = (ROOT::Minuit2::MinimumState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MinimumState const & is null", 0);
    return ;
  } 
  (arg1)->Add((ROOT::Minuit2::MinimumState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FunctionMinimum_Add__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  ROOT::Minuit2::MinimumState *arg2 = 0 ;
  ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm arg3 ;
  ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm *argp3 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  arg2 = (ROOT::Minuit2::MinimumState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MinimumState const & is null", 0);
    return ;
  } 
  argp3 = (ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->Add((ROOT::Minuit2::MinimumState const &)*arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FunctionMinimum_Seed(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  MinimumSeed *result = 0 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (MinimumSeed *) &((ROOT::Minuit2::FunctionMinimum const *)arg1)->Seed();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FunctionMinimum_States(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  std::vector< ROOT::Minuit2::MinimumState > *result = 0 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (std::vector< ROOT::Minuit2::MinimumState > *) &((ROOT::Minuit2::FunctionMinimum const *)arg1)->States();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FunctionMinimum_UserState(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  ROOT::Minuit2::MnUserParameterState *result = 0 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (ROOT::Minuit2::MnUserParameterState *) &((ROOT::Minuit2::FunctionMinimum const *)arg1)->UserState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FunctionMinimum_UserParameters(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  ROOT::Minuit2::MnUserParameters *result = 0 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (ROOT::Minuit2::MnUserParameters *) &((ROOT::Minuit2::FunctionMinimum const *)arg1)->UserParameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FunctionMinimum_UserCovariance(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  ROOT::Minuit2::MnUserCovariance *result = 0 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (ROOT::Minuit2::MnUserCovariance *) &((ROOT::Minuit2::FunctionMinimum const *)arg1)->UserCovariance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FunctionMinimum_State(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  ROOT::Minuit2::MinimumState *result = 0 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (ROOT::Minuit2::MinimumState *) &((ROOT::Minuit2::FunctionMinimum const *)arg1)->State();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FunctionMinimum_Parameters(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  ROOT::Minuit2::MinimumParameters *result = 0 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (ROOT::Minuit2::MinimumParameters *) &((ROOT::Minuit2::FunctionMinimum const *)arg1)->Parameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FunctionMinimum_Error(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  MinimumError *result = 0 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (MinimumError *) &((ROOT::Minuit2::FunctionMinimum const *)arg1)->Error();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FunctionMinimum_Grad(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  FunctionGradient *result = 0 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (FunctionGradient *) &((ROOT::Minuit2::FunctionMinimum const *)arg1)->Grad();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FunctionMinimum_Fval(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (double)((ROOT::Minuit2::FunctionMinimum const *)arg1)->Fval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FunctionMinimum_Edm(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (double)((ROOT::Minuit2::FunctionMinimum const *)arg1)->Edm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FunctionMinimum_NFcn(void * jarg1) {
  int jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  int result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (int)((ROOT::Minuit2::FunctionMinimum const *)arg1)->NFcn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_FunctionMinimum_Up(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (double)((ROOT::Minuit2::FunctionMinimum const *)arg1)->Up();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FunctionMinimum_IsValid(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (bool)((ROOT::Minuit2::FunctionMinimum const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FunctionMinimum_HasValidParameters(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (bool)((ROOT::Minuit2::FunctionMinimum const *)arg1)->HasValidParameters();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FunctionMinimum_HasValidCovariance(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (bool)((ROOT::Minuit2::FunctionMinimum const *)arg1)->HasValidCovariance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FunctionMinimum_HasAccurateCovar(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (bool)((ROOT::Minuit2::FunctionMinimum const *)arg1)->HasAccurateCovar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FunctionMinimum_HasPosDefCovar(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (bool)((ROOT::Minuit2::FunctionMinimum const *)arg1)->HasPosDefCovar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FunctionMinimum_HasMadePosDefCovar(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (bool)((ROOT::Minuit2::FunctionMinimum const *)arg1)->HasMadePosDefCovar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FunctionMinimum_HesseFailed(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (bool)((ROOT::Minuit2::FunctionMinimum const *)arg1)->HesseFailed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FunctionMinimum_HasCovariance(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (bool)((ROOT::Minuit2::FunctionMinimum const *)arg1)->HasCovariance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FunctionMinimum_IsAboveMaxEdm(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (bool)((ROOT::Minuit2::FunctionMinimum const *)arg1)->IsAboveMaxEdm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FunctionMinimum_HasReachedCallLimit(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  result = (bool)((ROOT::Minuit2::FunctionMinimum const *)arg1)->HasReachedCallLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FunctionMinimum_SetErrorDef(void * jarg1, double jarg2) {
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  double arg2 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetErrorDef(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FunctionMinimum(void * jarg1) {
  ROOT::Minuit2::FunctionMinimum *arg1 = (ROOT::Minuit2::FunctionMinimum *) 0 ;
  
  arg1 = (ROOT::Minuit2::FunctionMinimum *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnMigradWrap__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ROOT::Minuit2::FCNWrap *arg1 = 0 ;
  ROOT::Minuit2::MnUserParameterState *arg2 = 0 ;
  ROOT::Minuit2::MnStrategy *arg3 = 0 ;
  ROOT::Minuit2::MnMigradWrap *result = 0 ;
  
  arg1 = (ROOT::Minuit2::FCNWrap *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::FCNWrap const & is null", 0);
    return 0;
  } 
  arg2 = (ROOT::Minuit2::MnUserParameterState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MnUserParameterState const & is null", 0);
    return 0;
  } 
  arg3 = (ROOT::Minuit2::MnStrategy *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MnStrategy const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::MnMigradWrap *)new ROOT::Minuit2::MnMigradWrap((ROOT::Minuit2::FCNWrap const &)*arg1,(ROOT::Minuit2::MnUserParameterState const &)*arg2,(ROOT::Minuit2::MnStrategy const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MnMigradWrap__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ROOT::Minuit2::FCNWrap *arg1 = 0 ;
  ROOT::Minuit2::MnUserParameterState *arg2 = 0 ;
  ROOT::Minuit2::MnMigradWrap *result = 0 ;
  
  arg1 = (ROOT::Minuit2::FCNWrap *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::FCNWrap const & is null", 0);
    return 0;
  } 
  arg2 = (ROOT::Minuit2::MnUserParameterState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MnUserParameterState const & is null", 0);
    return 0;
  } 
  result = (ROOT::Minuit2::MnMigradWrap *)new ROOT::Minuit2::MnMigradWrap((ROOT::Minuit2::FCNWrap const &)*arg1,(ROOT::Minuit2::MnUserParameterState const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnMigradWrap_Run__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3) {
  void * jresult ;
  ROOT::Minuit2::MnMigradWrap *arg1 = (ROOT::Minuit2::MnMigradWrap *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  SwigValueWrapper< ROOT::Minuit2::FunctionMinimum > result;
  
  arg1 = (ROOT::Minuit2::MnMigradWrap *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  result = (arg1)->Run(arg2,arg3);
  jresult = new ROOT::Minuit2::FunctionMinimum(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnMigradWrap_Run__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ROOT::Minuit2::MnMigradWrap *arg1 = (ROOT::Minuit2::MnMigradWrap *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< ROOT::Minuit2::FunctionMinimum > result;
  
  arg1 = (ROOT::Minuit2::MnMigradWrap *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->Run(arg2);
  jresult = new ROOT::Minuit2::FunctionMinimum(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MnMigradWrap_Run__SWIG_2(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MnMigradWrap *arg1 = (ROOT::Minuit2::MnMigradWrap *) 0 ;
  SwigValueWrapper< ROOT::Minuit2::FunctionMinimum > result;
  
  arg1 = (ROOT::Minuit2::MnMigradWrap *)jarg1; 
  result = (arg1)->Run();
  jresult = new ROOT::Minuit2::FunctionMinimum(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MnMigradWrap(void * jarg1) {
  ROOT::Minuit2::MnMigradWrap *arg1 = (ROOT::Minuit2::MnMigradWrap *) 0 ;
  
  arg1 = (ROOT::Minuit2::MnMigradWrap *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MinimumState__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ROOT::Minuit2::MinimumState *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (ROOT::Minuit2::MinimumState *)new ROOT::Minuit2::MinimumState(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MinimumState__SWIG_1(double jarg1, double jarg2, int jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  ROOT::Minuit2::MinimumState *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = (ROOT::Minuit2::MinimumState *)new ROOT::Minuit2::MinimumState(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MinimumState__SWIG_2(void * jarg1, double jarg2, int jarg3) {
  void * jresult ;
  ROOT::Minuit2::MinimumParameters *arg1 = 0 ;
  double arg2 ;
  int arg3 ;
  ROOT::Minuit2::MinimumState *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MinimumParameters *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MinimumParameters const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = (ROOT::Minuit2::MinimumState *)new ROOT::Minuit2::MinimumState((ROOT::Minuit2::MinimumParameters const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MinimumState__SWIG_3(void * jarg1, void * jarg2, void * jarg3, double jarg4, int jarg5) {
  void * jresult ;
  ROOT::Minuit2::MinimumParameters *arg1 = 0 ;
  ROOT::Minuit2::MinimumError *arg2 = 0 ;
  ROOT::Minuit2::FunctionGradient *arg3 = 0 ;
  double arg4 ;
  int arg5 ;
  ROOT::Minuit2::MinimumState *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MinimumParameters *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MinimumParameters const & is null", 0);
    return 0;
  } 
  arg2 = (ROOT::Minuit2::MinimumError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::MinimumError const & is null", 0);
    return 0;
  } 
  arg3 = (ROOT::Minuit2::FunctionGradient *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ROOT::Minuit2::FunctionGradient const & is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  result = (ROOT::Minuit2::MinimumState *)new ROOT::Minuit2::MinimumState((ROOT::Minuit2::MinimumParameters const &)*arg1,(ROOT::Minuit2::MinimumError const &)*arg2,(ROOT::Minuit2::FunctionGradient const &)*arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MinimumState_Parameters(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  ROOT::Minuit2::MinimumParameters *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  result = (ROOT::Minuit2::MinimumParameters *) &((ROOT::Minuit2::MinimumState const *)arg1)->Parameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MinimumState_Vec(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  ROOT::Minuit2::MnAlgebraicVector *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  result = (ROOT::Minuit2::MnAlgebraicVector *) &((ROOT::Minuit2::MinimumState const *)arg1)->Vec();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MinimumState_size(void * jarg1) {
  int jresult ;
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  int result;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  result = (int)((ROOT::Minuit2::MinimumState const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MinimumState_Error(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  ROOT::Minuit2::MinimumError *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  result = (ROOT::Minuit2::MinimumError *) &((ROOT::Minuit2::MinimumState const *)arg1)->Error();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MinimumState_Gradient(void * jarg1) {
  void * jresult ;
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  ROOT::Minuit2::FunctionGradient *result = 0 ;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  result = (ROOT::Minuit2::FunctionGradient *) &((ROOT::Minuit2::MinimumState const *)arg1)->Gradient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MinimumState_Fval(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  result = (double)((ROOT::Minuit2::MinimumState const *)arg1)->Fval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MinimumState_Edm(void * jarg1) {
  double jresult ;
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  double result;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  result = (double)((ROOT::Minuit2::MinimumState const *)arg1)->Edm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MinimumState_NFcn(void * jarg1) {
  int jresult ;
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  int result;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  result = (int)((ROOT::Minuit2::MinimumState const *)arg1)->NFcn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MinimumState_IsValid(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  result = (bool)((ROOT::Minuit2::MinimumState const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MinimumState_HasParameters(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  result = (bool)((ROOT::Minuit2::MinimumState const *)arg1)->HasParameters();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MinimumState_HasCovariance(void * jarg1) {
  unsigned int jresult ;
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  bool result;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  result = (bool)((ROOT::Minuit2::MinimumState const *)arg1)->HasCovariance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MinimumState(void * jarg1) {
  ROOT::Minuit2::MinimumState *arg1 = (ROOT::Minuit2::MinimumState *) 0 ;
  
  arg1 = (ROOT::Minuit2::MinimumState *)jarg1; 
  delete arg1;
}


SWIGEXPORT ROOT::Minuit2::FCNBase * SWIGSTDCALL CSharp_FCNBaseSwigImpl_FCNBase_GetInterfaceCPtr(ROOT::Minuit2::FCNBase *jarg1) {
    return (ROOT::Minuit2::FCNBase *)jarg1;
}

#ifdef __cplusplus
}
#endif

