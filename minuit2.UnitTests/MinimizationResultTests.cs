using minuit2.net;

namespace minuit2.UnitTests;

[Description("""
             Minimization results for various scenarios are validated through comparison with the output generated by 
             iminuit, the Minuit2 wrapper for Python.
             """)]
public class MinimizationResultTests
{
    private readonly Func<double, IList<double>, double> _cubicPoly = 
        (x, c) => c[0] + c[1] * x + c[2] * x * x + c[3] * x * x * x;
    
    private readonly List<double> _xValues = 
    [
        0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5
    ];

    // y-values are generated using a cubic polynomial with coefficients: c0 = 10, c1 = -2, c2 = 1, c3 = -0.1
    // and a random normal noise with a standard deviation of 0.1
    private readonly List<double> _yValues =
    [
        9.9, 9.2, 9.03, 8.93, 9.29, 9.75, 10.24, 11.02, 11.57, 12.11, 12.51, 12.46, 12.52, 11.72, 10.8, 9.08, 6.95,
        3.77, 0.07, -4.45
    ];

    private const double YError = 0.1;  // standard deviation of noise used to generate the above y-values

    
    [Test]
    public void basic_scenario()
    {
        var cost = new LeastSquares(_xValues, _yValues, YError, _cubicPoly);
        
        var initialParameters = new UserParameters(
            new Parameter("c0", 10.75), 
            new Parameter("c1", -1.97), 
            new Parameter("c2", 1.13), 
            new Parameter("c3", -0.11));
        
        var minimizer = new Migrad(cost, initialParameters);
        var result = minimizer.Run();

        result.Should()
            .HaveIsValid(true).And
            .HaveNumberOfVariables(4).And
            .HaveNumberOfFunctionCallsGreaterThan(10).And
            .HaveReachedFunctionCallLimit(false).And
            .HaveConverged(true).And
            .HaveCostValue(12.49).And
            .HaveParameterValues([9.974, -1.959, 0.9898, -0.09931]).And
            .HaveParameterCovarianceMatrix(new[,]
            {
                { 0.005623, -0.004301, 0.000881, -5.271e-05 },
                { -0.004301, 0.004923, -0.001177, 7.655e-05 },
                { 0.000881, -0.001177, 0.0003037, -2.067e-05 },
                { -5.271e-05, 7.655e-05, -2.067e-05, 1.45e-06 }
            });
    }
}
